Total of 10+ hours of work this week.

1 & 3. This week I talked with the teacher and got an insight to iterative deepening. The theory behind it is to make a function that holds a dictionary and tracks time, start of every loop it checks if there is time left, and if there is, it calls minimax with a step deeper than the last loop. This does mean that the minimax has to always recalculate, but with the dictionary, we can hold the best moves in it, and thanks to alpha beta pruning, if the previous best move is still the best move in this depth, the calculation time will be very short. The teacher didn't tell me to do make the deepening to stop after finding a guaranteed end, but I saw the result of a bad execution of this in the work I peer reviewed. Thus, I debugged by adding the AI's cal_depth and evaluation of the position. As a result, I saw how the AI started calculating to depths over 200 000, which I quickly realized is because of the winning heuristic evaluation, where I sum the depth. With a while of investigation, I figured a good way to solve this. More in next paragraph.

2. The algorithm is now very inconsistant with its calculations. I tested the deepening with a calculation time of 1, in which the calculation depths are 9-10 per move. This produced an even better result than me testing with calculation time of 2, in which the depths were 10-11 per move. I speculate that this is due to my poor execution of the heuristic function, which if no other big changes required, I will start investigating on next week. The deepening that went to depths over 200 000, I fixed it with just 2 lines of code where the deepening checks if after each depth of calculation, wether the game has won or not. If a guaranteed win has been found within depth 10, the shortest winning sequence has to be calculated too in the memory, which means that we don't have to calculate any further, so we break.

4 & 5. As I said in the last paragraph, if nothing else has to be done before the work is deployable, I would like to proceed to optimize my heuristic function. Consequently, my question to the teacher is, whether they see any other big issues I have to fix in order for me to get as good of a grade as possible.

AI usage:
As always I have used LLM to help debugging and formalizing my program.
